package com.tm.expandlayoutinlist;

import android.content.Context;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.SparseArray;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ListView;

import com.tm.expandlayoutinlist.entity.ExpandData;
import com.tm.expandlayoutinlist.view.ExpandTextView;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "MainActivity";

    private String[] str = new String[]{
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人在最好的时光，总会犯上一些痴，一些傻。哪一段青春不荒唐，哪一场爱情不受伤。",
            "再好的东西，也有失去的一天，再美的事物，也有淡忘的一天。如果不能拥有就放手，如果舍不得就痛苦，该珍惜就珍惜，该放弃就放弃，走得轻松，活得才顺心。别问谁的行为伤了你，谁的感情苦了你。",
            "现实会告诉你不努力就会被生活踩死无需找什么借口一无所有就是拼的理由。",
            "人不怕有缺点，就怕没特点。这个特点就是你的专长和优势，成功的秘诀就在于经营自己的长处。不管是谁，想把自己改造成“完人”是不现实的，反而应当发现并培养自己的长处，形成独特的亮点和优势。几乎所有的成功者，都是优点和缺点都非常突出的人。发挥自己的优势，才是成功的关键。",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人类在意所有不能被回馈的感情，并且非常希望所有感情都要被回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人类在意所有不能被回馈的感情，并且非常希望所有感情都要被回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人类在意所有不能被回馈的感情，并且非常希望所有感情都要被回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人类在意所有不能被回馈的感情，并且非常希望所有感情都要被回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "人类在意所有不能被回馈的感情，并且非常希望所有感情都要被回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111",
            "记忆，像是倒在掌心的流水，无论你我摊开还是紧握，它总会渐渐流逝。只是，心也在慢慢枯萎。",
            "人真的要自己争气。一旦做出成绩来，那么全世界都将和颜悦色。事情都是有正反面的，只要摆正心态，人生中没有朋友，会孤单；没有敌人，会失败；因为朋友是用来依赖的，敌人是用来激发自己潜能的。没反应也是一种反应，没表情也是一种表情，不选择也是一种选择，不回应也是一种回应。",
            "111"
    };

    private List<String> list = new ArrayList<>();

    private ListView lv;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        lv = (ListView) findViewById(R.id.lv);
//        StringBuilder sb = new StringBuilder("Exception!");
        for (int i = 0; i < str.length; i++) {
//            sb.append("测试数据！");
            list.add(i + ":" + str[i]);
        }

        MyAdapter adapter = new MyAdapter(MainActivity.this, list);
        lv.setAdapter(adapter);

    }

    static class MyAdapter extends BaseAdapter{
        private Context context;
        private List<String> list;
        private SparseArray<ExpandData> mCollapsedStatus;

        MyAdapter(Context context, List<String> list) {
            mCollapsedStatus = new SparseArray<>();
            for (int i = 0; i < list.size(); i++) {
                ExpandData expandData = new ExpandData();
                expandData.setExpand(false);
                mCollapsedStatus.append(i, expandData);
            }
            this.context = context;
            this.list = list;
        }

        @Override
        public int getCount() {
            return list.size();
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (convertView == null)
                convertView = View.inflate(context, R.layout.item_2, null);
//            TextView tv = (TextView) convertView.findViewById(R.id.tv);
//            tv.setText(list.get(position));
//            TextPaint paint = tv.getPaint();
//            float textWidth = paint.measureText(list.get(position));
//            Log.e(TAG, "getView: textWidth------>>" + textWidth);
//            float screenWidth = ScreenUtils.getScreenWidth(MainActivity.this);
//            float tvWidth = screenWidth - DensityUtils.dp2px(MainActivity.this, 10) * 2;//720-20*2
//            Log.e(TAG, "getView: screenWidth------>>" + tvWidth);
//            if (textWidth / tvWidth <= 1) {
//                tv.setLines(1);
//            } else if (textWidth / tvWidth <= 2) {
//                tv.setLines(2);
//            } else {
//                tv.setLines(3);
//            }
            ExpandTextView expandTextView = (ExpandTextView) convertView.findViewById(R.id.expand_layout);
            expandTextView.setText(list, mCollapsedStatus, position);

            return convertView;
        }
    }
}
